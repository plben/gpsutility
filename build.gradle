/*
 * Copyright 2018 Ben Peng
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id('java')
    id('application')
    id('org.beryx.jlink') version('2.1.3-gradle4')
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
mainClassName = "net.benpl.gpsutility.AppEntry"

def currOS = org.gradle.internal.os.OperatingSystem.current()
ext {
    moduleName = 'net.benpl.gpsutility'
    launcherName = 'GPSUtility'
    imageDirPath = "$buildDir/${launcherName}"
    imageZipPath = "$buildDir/${launcherName}.zip"

    jfxVer = "11.0.1"
    platform = currOS.isMacOsX() ? "mac" : currOS.isWindows() ? "win" : currOS.isLinux() ? "linux" : "unix"
}

repositories {
    maven {
        url = "http://localhost:8081/repository/maven-public"
    }
}

dependencies {
    // Serial port
    implementation "com.fazecast:jSerialComm:2.3.0"
    // JAXB (API & Implementation)
    implementation "org.glassfish.jaxb:jaxb-runtime:2.4.0-b180830.0438"
    // Annotation @PostConstruct
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    // JavaFX
    implementation "org.openjfx:javafx-base:$jfxVer:$platform"
    implementation "org.openjfx:javafx-fxml:$jfxVer:$platform"
    implementation "org.openjfx:javafx-graphics:$jfxVer:$platform"
    implementation "org.openjfx:javafx-controls:$jfxVer:$platform"
}

compileJava {
    options.compilerArgs = ['--module-path', classpath.asPath]
    options.encoding = 'UTF-8'
    classpath = files()
}

jlink {
    launcherName = project.launcherName
    imageDir = file(imageDirPath)
    imageZip = file(imageZipPath)
    mergedModule {
        // API for transferring data between and within applications
        requires 'java.datatransfer'
    }
}

tasks.jlink.doLast {
    copy {
        from('src/main/resources')
        into("$imageDirPath/bin")
    }
}
